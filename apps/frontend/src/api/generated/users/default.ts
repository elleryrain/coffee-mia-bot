/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è api –¥–ª—è mia coffee bot
 * –û–ø–∏—Å–∞–Ω–∏–µ api –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
 * OpenAPI spec version: 4.2.8
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';
import type {
  AddFavoriteItem200,
  AddFavoriteItemBody,
  CreateUserOrder200,
  CreateUserOrderBody,
  GetApiUserOrder200Item,
  GetDripPacks200Item,
  GetGrains200Item,
  GetItemByIdParams,
  GetOtherItems200Item,
  GrindingType,
  Item,
  RemoveFavoriteItem200,
  RemoveFavoriteItemBody,
  ShortItem,
  UpdateUserNameBody,
  UpdateUserPhoneBody,
  UpdateUserUsernameBody,
  UserProperties,
} from './model';
import { baseApiRequest } from '../../baseApiRequest';

/**
 * —Ä–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑—ë—Ä–µ–Ω
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑—ë—Ä–µ–Ω
 */
export const getGrains = (signal?: AbortSignal) => {
  return baseApiRequest<GetGrains200Item[]>({
    url: `/api/item/grain`,
    method: 'GET',
    signal,
  });
};

export const getGetGrainsQueryKey = () => {
  return [`/api/item/grain`] as const;
};

export const getGetGrainsQueryOptions = <
  TData = Awaited<ReturnType<typeof getGrains>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getGrains>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetGrainsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getGrains>>> = ({
    signal,
  }) => getGrains(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getGrains>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetGrainsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGrains>>
>;
export type GetGrainsQueryError = unknown;

export function useGetGrains<
  TData = Awaited<ReturnType<typeof getGrains>>,
  TError = unknown
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getGrains>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getGrains>>,
        TError,
        Awaited<ReturnType<typeof getGrains>>
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetGrains<
  TData = Awaited<ReturnType<typeof getGrains>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getGrains>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getGrains>>,
        TError,
        Awaited<ReturnType<typeof getGrains>>
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetGrains<
  TData = Awaited<ReturnType<typeof getGrains>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getGrains>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑—ë—Ä–µ–Ω
 */

export function useGetGrains<
  TData = Awaited<ReturnType<typeof getGrains>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getGrains>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetGrainsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * —Ä–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥—Ä–∏–ø –ø–∞–∫–µ—Ç–æ–≤
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥—Ä–∏–ø –ø–∞–∫–µ—Ç–æ–≤
 */
export const getDripPacks = (signal?: AbortSignal) => {
  return baseApiRequest<GetDripPacks200Item[]>({
    url: `/api/item/dripPacks`,
    method: 'GET',
    signal,
  });
};

export const getGetDripPacksQueryKey = () => {
  return [`/api/item/dripPacks`] as const;
};

export const getGetDripPacksQueryOptions = <
  TData = Awaited<ReturnType<typeof getDripPacks>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getDripPacks>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDripPacksQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDripPacks>>> = ({
    signal,
  }) => getDripPacks(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDripPacks>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDripPacksQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDripPacks>>
>;
export type GetDripPacksQueryError = unknown;

export function useGetDripPacks<
  TData = Awaited<ReturnType<typeof getDripPacks>>,
  TError = unknown
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getDripPacks>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getDripPacks>>,
        TError,
        Awaited<ReturnType<typeof getDripPacks>>
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDripPacks<
  TData = Awaited<ReturnType<typeof getDripPacks>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getDripPacks>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getDripPacks>>,
        TError,
        Awaited<ReturnType<typeof getDripPacks>>
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetDripPacks<
  TData = Awaited<ReturnType<typeof getDripPacks>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getDripPacks>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥—Ä–∏–ø –ø–∞–∫–µ—Ç–æ–≤
 */

export function useGetDripPacks<
  TData = Awaited<ReturnType<typeof getDripPacks>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getDripPacks>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetDripPacksQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * —Ä–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—â–µ–π
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –≤–µ—â–µ–π
 */
export const getOtherItems = (signal?: AbortSignal) => {
  return baseApiRequest<GetOtherItems200Item[]>({
    url: `/api/item/other`,
    method: 'GET',
    signal,
  });
};

export const getGetOtherItemsQueryKey = () => {
  return [`/api/item/other`] as const;
};

export const getGetOtherItemsQueryOptions = <
  TData = Awaited<ReturnType<typeof getOtherItems>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getOtherItems>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetOtherItemsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOtherItems>>> = ({
    signal,
  }) => getOtherItems(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getOtherItems>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetOtherItemsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOtherItems>>
>;
export type GetOtherItemsQueryError = unknown;

export function useGetOtherItems<
  TData = Awaited<ReturnType<typeof getOtherItems>>,
  TError = unknown
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getOtherItems>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getOtherItems>>,
        TError,
        Awaited<ReturnType<typeof getOtherItems>>
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetOtherItems<
  TData = Awaited<ReturnType<typeof getOtherItems>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getOtherItems>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getOtherItems>>,
        TError,
        Awaited<ReturnType<typeof getOtherItems>>
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetOtherItems<
  TData = Awaited<ReturnType<typeof getOtherItems>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getOtherItems>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –≤–µ—â–µ–π
 */

export function useGetOtherItems<
  TData = Awaited<ReturnType<typeof getOtherItems>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getOtherItems>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetOtherItemsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * —Ä–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–æ–≤–∏–Ω–æ–∫
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–æ–≤–∏–Ω–æ–∫
 */
export const getNewItems = (signal?: AbortSignal) => {
  return baseApiRequest<ShortItem[]>({
    url: `/api/item/new`,
    method: 'GET',
    signal,
  });
};

export const getGetNewItemsQueryKey = () => {
  return [`/api/item/new`] as const;
};

export const getGetNewItemsQueryOptions = <
  TData = Awaited<ReturnType<typeof getNewItems>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getNewItems>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNewItemsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNewItems>>> = ({
    signal,
  }) => getNewItems(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getNewItems>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetNewItemsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNewItems>>
>;
export type GetNewItemsQueryError = unknown;

export function useGetNewItems<
  TData = Awaited<ReturnType<typeof getNewItems>>,
  TError = unknown
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getNewItems>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getNewItems>>,
        TError,
        Awaited<ReturnType<typeof getNewItems>>
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNewItems<
  TData = Awaited<ReturnType<typeof getNewItems>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getNewItems>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getNewItems>>,
        TError,
        Awaited<ReturnType<typeof getNewItems>>
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNewItems<
  TData = Awaited<ReturnType<typeof getNewItems>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getNewItems>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–æ–≤–∏–Ω–æ–∫
 */

export function useGetNewItems<
  TData = Awaited<ReturnType<typeof getNewItems>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getNewItems>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetNewItemsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * —Ä–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const getFavoriteItems = (signal?: AbortSignal) => {
  return baseApiRequest<ShortItem[]>({
    url: `/api/user/favorite`,
    method: 'GET',
    signal,
  });
};

export const getGetFavoriteItemsQueryKey = () => {
  return [`/api/user/favorite`] as const;
};

export const getGetFavoriteItemsQueryOptions = <
  TData = Awaited<ReturnType<typeof getFavoriteItems>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getFavoriteItems>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetFavoriteItemsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getFavoriteItems>>
  > = ({ signal }) => getFavoriteItems(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getFavoriteItems>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetFavoriteItemsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFavoriteItems>>
>;
export type GetFavoriteItemsQueryError = unknown;

export function useGetFavoriteItems<
  TData = Awaited<ReturnType<typeof getFavoriteItems>>,
  TError = unknown
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getFavoriteItems>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getFavoriteItems>>,
        TError,
        Awaited<ReturnType<typeof getFavoriteItems>>
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetFavoriteItems<
  TData = Awaited<ReturnType<typeof getFavoriteItems>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getFavoriteItems>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getFavoriteItems>>,
        TError,
        Awaited<ReturnType<typeof getFavoriteItems>>
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetFavoriteItems<
  TData = Awaited<ReturnType<typeof getFavoriteItems>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getFavoriteItems>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

export function useGetFavoriteItems<
  TData = Awaited<ReturnType<typeof getFavoriteItems>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getFavoriteItems>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetFavoriteItemsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * —Ä–æ—É—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
 * @summary –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
 */
export const addFavoriteItem = (
  addFavoriteItemBody: AddFavoriteItemBody,
  signal?: AbortSignal
) => {
  return baseApiRequest<AddFavoriteItem200>({
    url: `/api/user/favorite`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: addFavoriteItemBody,
    signal,
  });
};

export const getAddFavoriteItemMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addFavoriteItem>>,
    TError,
    { data: AddFavoriteItemBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addFavoriteItem>>,
  TError,
  { data: AddFavoriteItemBody },
  TContext
> => {
  const mutationKey = ['addFavoriteItem'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addFavoriteItem>>,
    { data: AddFavoriteItemBody }
  > = (props) => {
    const { data } = props ?? {};

    return addFavoriteItem(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddFavoriteItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof addFavoriteItem>>
>;
export type AddFavoriteItemMutationBody = AddFavoriteItemBody;
export type AddFavoriteItemMutationError = unknown;

/**
 * @summary –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
 */
export const useAddFavoriteItem = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addFavoriteItem>>,
    TError,
    { data: AddFavoriteItemBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof addFavoriteItem>>,
  TError,
  { data: AddFavoriteItemBody },
  TContext
> => {
  const mutationOptions = getAddFavoriteItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * —Ä–æ—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
 */
export const removeFavoriteItem = (
  removeFavoriteItemBody: RemoveFavoriteItemBody
) => {
  return baseApiRequest<RemoveFavoriteItem200>({
    url: `/api/user/favorite`,
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json' },
    data: removeFavoriteItemBody,
  });
};

export const getRemoveFavoriteItemMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeFavoriteItem>>,
    TError,
    { data: RemoveFavoriteItemBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof removeFavoriteItem>>,
  TError,
  { data: RemoveFavoriteItemBody },
  TContext
> => {
  const mutationKey = ['removeFavoriteItem'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeFavoriteItem>>,
    { data: RemoveFavoriteItemBody }
  > = (props) => {
    const { data } = props ?? {};

    return removeFavoriteItem(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type RemoveFavoriteItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeFavoriteItem>>
>;
export type RemoveFavoriteItemMutationBody = RemoveFavoriteItemBody;
export type RemoveFavoriteItemMutationError = unknown;

/**
 * @summary –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
 */
export const useRemoveFavoriteItem = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeFavoriteItem>>,
    TError,
    { data: RemoveFavoriteItemBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof removeFavoriteItem>>,
  TError,
  { data: RemoveFavoriteItemBody },
  TContext
> => {
  const mutationOptions = getRemoveFavoriteItemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ –ø–æ id
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ –ø–æ ID
 */
export const getItemById = (
  params: GetItemByIdParams,
  signal?: AbortSignal
) => {
  return baseApiRequest<Item>({
    url: `/api/item`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetItemByIdQueryKey = (params: GetItemByIdParams) => {
  return [`/api/item`, ...(params ? [params] : [])] as const;
};

export const getGetItemByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getItemById>>,
  TError = unknown
>(
  params: GetItemByIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getItemById>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetItemByIdQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getItemById>>> = ({
    signal,
  }) => getItemById(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getItemById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetItemByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getItemById>>
>;
export type GetItemByIdQueryError = unknown;

export function useGetItemById<
  TData = Awaited<ReturnType<typeof getItemById>>,
  TError = unknown
>(
  params: GetItemByIdParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getItemById>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getItemById>>,
          TError,
          Awaited<ReturnType<typeof getItemById>>
        >,
        'initialData'
      >;
  }
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetItemById<
  TData = Awaited<ReturnType<typeof getItemById>>,
  TError = unknown
>(
  params: GetItemByIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getItemById>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getItemById>>,
          TError,
          Awaited<ReturnType<typeof getItemById>>
        >,
        'initialData'
      >;
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetItemById<
  TData = Awaited<ReturnType<typeof getItemById>>,
  TError = unknown
>(
  params: GetItemByIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getItemById>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ –ø–æ ID
 */

export function useGetItemById<
  TData = Awaited<ReturnType<typeof getItemById>>,
  TError = unknown
>(
  params: GetItemByIdParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getItemById>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetItemByIdQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ –ø–æ–∫—É–ø–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ –ø–æ–∫—É–ø–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
 */
export const getPopularItems = (signal?: AbortSignal) => {
  return baseApiRequest<ShortItem[]>({
    url: `/api/item/popular`,
    method: 'GET',
    signal,
  });
};

export const getGetPopularItemsQueryKey = () => {
  return [`/api/item/popular`] as const;
};

export const getGetPopularItemsQueryOptions = <
  TData = Awaited<ReturnType<typeof getPopularItems>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPopularItems>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPopularItemsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPopularItems>>> = ({
    signal,
  }) => getPopularItems(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPopularItems>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPopularItemsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPopularItems>>
>;
export type GetPopularItemsQueryError = unknown;

export function useGetPopularItems<
  TData = Awaited<ReturnType<typeof getPopularItems>>,
  TError = unknown
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPopularItems>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getPopularItems>>,
        TError,
        Awaited<ReturnType<typeof getPopularItems>>
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPopularItems<
  TData = Awaited<ReturnType<typeof getPopularItems>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPopularItems>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getPopularItems>>,
        TError,
        Awaited<ReturnType<typeof getPopularItems>>
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPopularItems<
  TData = Awaited<ReturnType<typeof getPopularItems>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPopularItems>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ –ø–æ–∫—É–ø–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
 */

export function useGetPopularItems<
  TData = Awaited<ReturnType<typeof getPopularItems>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPopularItems>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPopularItemsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–æ–º–æ–ª–∞ –¥–ª—è –∫–æ—Ñ–µ
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–æ–º–æ–ª–∞ –¥–ª—è –∫–æ—Ñ–µ
 */
export const getGrindingTypes = (signal?: AbortSignal) => {
  return baseApiRequest<GrindingType[]>({
    url: `/api/grindingTypes`,
    method: 'GET',
    signal,
  });
};

export const getGetGrindingTypesQueryKey = () => {
  return [`/api/grindingTypes`] as const;
};

export const getGetGrindingTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getGrindingTypes>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getGrindingTypes>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetGrindingTypesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getGrindingTypes>>
  > = ({ signal }) => getGrindingTypes(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getGrindingTypes>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetGrindingTypesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGrindingTypes>>
>;
export type GetGrindingTypesQueryError = unknown;

export function useGetGrindingTypes<
  TData = Awaited<ReturnType<typeof getGrindingTypes>>,
  TError = unknown
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getGrindingTypes>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getGrindingTypes>>,
        TError,
        Awaited<ReturnType<typeof getGrindingTypes>>
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetGrindingTypes<
  TData = Awaited<ReturnType<typeof getGrindingTypes>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getGrindingTypes>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getGrindingTypes>>,
        TError,
        Awaited<ReturnType<typeof getGrindingTypes>>
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetGrindingTypes<
  TData = Awaited<ReturnType<typeof getGrindingTypes>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getGrindingTypes>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–æ–º–æ–ª–∞ –¥–ª—è –∫–æ—Ñ–µ
 */

export function useGetGrindingTypes<
  TData = Awaited<ReturnType<typeof getGrindingTypes>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getGrindingTypes>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetGrindingTypesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
export const updateUserPhone = (updateUserPhoneBody: UpdateUserPhoneBody) => {
  return baseApiRequest<UserProperties>({
    url: `/api/user/phone`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateUserPhoneBody,
  });
};

export const getUpdateUserPhoneMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserPhone>>,
    TError,
    { data: UpdateUserPhoneBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUserPhone>>,
  TError,
  { data: UpdateUserPhoneBody },
  TContext
> => {
  const mutationKey = ['updateUserPhone'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateUserPhone>>,
    { data: UpdateUserPhoneBody }
  > = (props) => {
    const { data } = props ?? {};

    return updateUserPhone(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateUserPhoneMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUserPhone>>
>;
export type UpdateUserPhoneMutationBody = UpdateUserPhoneBody;
export type UpdateUserPhoneMutationError = unknown;

/**
 * @summary –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
export const useUpdateUserPhone = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserPhone>>,
    TError,
    { data: UpdateUserPhoneBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateUserPhone>>,
  TError,
  { data: UpdateUserPhoneBody },
  TContext
> => {
  const mutationOptions = getUpdateUserPhoneMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
export const updateUserName = (updateUserNameBody: UpdateUserNameBody) => {
  return baseApiRequest<UserProperties>({
    url: `/api/user/name`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateUserNameBody,
  });
};

export const getUpdateUserNameMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserName>>,
    TError,
    { data: UpdateUserNameBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUserName>>,
  TError,
  { data: UpdateUserNameBody },
  TContext
> => {
  const mutationKey = ['updateUserName'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateUserName>>,
    { data: UpdateUserNameBody }
  > = (props) => {
    const { data } = props ?? {};

    return updateUserName(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateUserNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUserName>>
>;
export type UpdateUserNameMutationBody = UpdateUserNameBody;
export type UpdateUserNameMutationError = unknown;

/**
 * @summary –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
export const useUpdateUserName = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserName>>,
    TError,
    { data: UpdateUserNameBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateUserName>>,
  TError,
  { data: UpdateUserNameBody },
  TContext
> => {
  const mutationOptions = getUpdateUserNameMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
export const updateUserUsername = (
  updateUserUsernameBody: UpdateUserUsernameBody
) => {
  return baseApiRequest<UserProperties>({
    url: `/api/user/username`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateUserUsernameBody,
  });
};

export const getUpdateUserUsernameMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserUsername>>,
    TError,
    { data: UpdateUserUsernameBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUserUsername>>,
  TError,
  { data: UpdateUserUsernameBody },
  TContext
> => {
  const mutationKey = ['updateUserUsername'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateUserUsername>>,
    { data: UpdateUserUsernameBody }
  > = (props) => {
    const { data } = props ?? {};

    return updateUserUsername(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateUserUsernameMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUserUsername>>
>;
export type UpdateUserUsernameMutationBody = UpdateUserUsernameBody;
export type UpdateUserUsernameMutationError = unknown;

/**
 * @summary –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
export const useUpdateUserUsername = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserUsername>>,
    TError,
    { data: UpdateUserUsernameBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateUserUsername>>,
  TError,
  { data: UpdateUserUsernameBody },
  TContext
> => {
  const mutationOptions = getUpdateUserUsernameMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const createUserOrder = (
  createUserOrderBody: CreateUserOrderBody,
  signal?: AbortSignal
) => {
  return baseApiRequest<CreateUserOrder200>({
    url: `/api/user/order`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createUserOrderBody,
    signal,
  });
};

export const getCreateUserOrderMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUserOrder>>,
    TError,
    { data: CreateUserOrderBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createUserOrder>>,
  TError,
  { data: CreateUserOrderBody },
  TContext
> => {
  const mutationKey = ['createUserOrder'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createUserOrder>>,
    { data: CreateUserOrderBody }
  > = (props) => {
    const { data } = props ?? {};

    return createUserOrder(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateUserOrderMutationResult = NonNullable<
  Awaited<ReturnType<typeof createUserOrder>>
>;
export type CreateUserOrderMutationBody = CreateUserOrderBody;
export type CreateUserOrderMutationError = unknown;

/**
 * @summary —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const useCreateUserOrder = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUserOrder>>,
    TError,
    { data: CreateUserOrderBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof createUserOrder>>,
  TError,
  { data: CreateUserOrderBody },
  TContext
> => {
  const mutationOptions = getCreateUserOrderMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const getApiUserOrder = (signal?: AbortSignal) => {
  return baseApiRequest<GetApiUserOrder200Item[]>({
    url: `/api/user/order`,
    method: 'GET',
    signal,
  });
};

export const getGetApiUserOrderQueryKey = () => {
  return [`/api/user/order`] as const;
};

export const getGetApiUserOrderQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUserOrder>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiUserOrder>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiUserOrderQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUserOrder>>> = ({
    signal,
  }) => getApiUserOrder(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUserOrder>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiUserOrderQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUserOrder>>
>;
export type GetApiUserOrderQueryError = unknown;

export function useGetApiUserOrder<
  TData = Awaited<ReturnType<typeof getApiUserOrder>>,
  TError = unknown
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiUserOrder>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiUserOrder>>,
        TError,
        Awaited<ReturnType<typeof getApiUserOrder>>
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUserOrder<
  TData = Awaited<ReturnType<typeof getApiUserOrder>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiUserOrder>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiUserOrder>>,
        TError,
        Awaited<ReturnType<typeof getApiUserOrder>>
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUserOrder<
  TData = Awaited<ReturnType<typeof getApiUserOrder>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiUserOrder>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

export function useGetApiUserOrder<
  TData = Awaited<ReturnType<typeof getApiUserOrder>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiUserOrder>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiUserOrderQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (—Ä–æ—É—Ç –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤ –Ω–∞—á–∞–ª–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
export const getUserInfo = (signal?: AbortSignal) => {
  return baseApiRequest<UserProperties>({
    url: `/api/user`,
    method: 'GET',
    signal,
  });
};

export const getGetUserInfoQueryKey = () => {
  return [`/api/user`] as const;
};

export const getGetUserInfoQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserInfo>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUserInfo>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserInfoQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserInfo>>> = ({
    signal,
  }) => getUserInfo(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserInfo>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserInfo>>
>;
export type GetUserInfoQueryError = unknown;

export function useGetUserInfo<
  TData = Awaited<ReturnType<typeof getUserInfo>>,
  TError = unknown
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUserInfo>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getUserInfo>>,
        TError,
        Awaited<ReturnType<typeof getUserInfo>>
      >,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserInfo<
  TData = Awaited<ReturnType<typeof getUserInfo>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUserInfo>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getUserInfo>>,
        TError,
        Awaited<ReturnType<typeof getUserInfo>>
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserInfo<
  TData = Awaited<ReturnType<typeof getUserInfo>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUserInfo>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */

export function useGetUserInfo<
  TData = Awaited<ReturnType<typeof getUserInfo>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUserInfo>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetUserInfoQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
